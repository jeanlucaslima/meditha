---
import "../styles/global.css";
import Container from '../components/ui/Container.astro';
import BrandLogo from '../components/ui/BrandLogo.astro';

export interface Props {
  title: string;
  description: string;
  ogImage?: string;
  noIndex?: boolean;
  canonical?: string;
  schema?: object;
  showHeader?: boolean;
}

const {
  title,
  description,
  ogImage = '/og-default.jpg',
  noIndex = false,
  canonical,
  schema,
  showHeader = true
} = Astro.props;

const fullTitle = title.includes('|') ? title : `${title} | Método Lux`;
const canonicalUrl = canonical || Astro.url.href;
const ogUrl = Astro.site ? new URL(ogImage, Astro.site).href : ogImage;
---

<!doctype html>
<html lang="pt-BR">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />

    <!-- SEO Meta Tags -->
    <title>{fullTitle}</title>
    <meta name="description" content={description} />
    <link rel="canonical" href={canonicalUrl} />

    {noIndex && <meta name="robots" content="noindex, nofollow" />}

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonicalUrl} />
    <meta property="og:title" content={fullTitle} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={ogUrl} />
    <meta property="og:locale" content="pt_BR" />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalUrl} />
    <meta property="twitter:title" content={fullTitle} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={ogUrl} />

    <!-- Additional Meta -->
    <meta name="theme-color" content="#2E5077" />
    <meta name="author" content="Método Lux" />

    <!-- Schema.org JSON-LD -->
    {schema && (
      <script type="application/ld+json" set:html={JSON.stringify(schema)} />
    )}

    <!-- Preconnect for performance -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://www.googletagmanager.com" />
    <link rel="preconnect" href="https://connect.facebook.net" />

    <!-- Critical CSS will be inlined here by build process -->
  </head>
  <body class="bg-base-100 text-base-content antialiased">
    {showHeader && (
      <header
        class="site-header sticky top-0 z-50 border-b border-base-300/40 bg-white/80 backdrop-blur"
        data-site-header
        data-visible="false"
        aria-hidden="true"
      >
        <Container class="flex items-center justify-between py-4" padding={true}>
          <BrandLogo size="sm" class="text-base-content" />
        </Container>
      </header>
    )}

    <slot />

    <!-- Scroll depth tracking -->
    <script>
      import { trackScrollDepth } from '../lib/analytics';

      let scrollDepthTracked = new Set();

      function handleScroll() {
        const scrollPercent = Math.round(
          (window.scrollY / (document.documentElement.scrollHeight - window.innerHeight)) * 100
        );

        [25, 50, 75, 100].forEach(threshold => {
          if (scrollPercent >= threshold && !scrollDepthTracked.has(threshold)) {
            scrollDepthTracked.add(threshold);
            trackScrollDepth(threshold);
          }
        });
      }

      window.addEventListener('scroll', handleScroll, { passive: true });

      // Reveal header after hero scroll
      const header = document.querySelector('[data-site-header]');
      const heroSection = document.getElementById('hero-section');

      if (header && heroSection) {
        const toggleHeaderVisibility = (visible) => {
          header.setAttribute('data-visible', visible ? 'false' : 'true');
          header.setAttribute('aria-hidden', visible ? 'true' : 'false');
        };

        const headerObserver = new IntersectionObserver(
          (entries) => {
            entries.forEach((entry) => {
              toggleHeaderVisibility(entry.isIntersecting);
            });
          },
          { threshold: 0.4 }
        );

        headerObserver.observe(heroSection);
      } else if (header) {
        header.setAttribute('data-visible', 'true');
        header.setAttribute('aria-hidden', 'false');
      }
    </script>
  </body>
</html>

<style>
  :global(header[data-site-header]) {
    pointer-events: none;
    opacity: 0;
    transform: translateY(-100%);
    transition:
      transform 200ms ease-out,
      opacity 200ms ease-out,
      box-shadow 200ms ease-out;
  }

  :global(header[data-site-header][data-visible='true']) {
    pointer-events: auto;
    opacity: 1;
    transform: translateY(0);
    box-shadow: 0 10px 30px -12px rgba(15, 23, 42, 0.25);
  }
</style>
