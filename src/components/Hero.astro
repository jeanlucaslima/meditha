---
import Container from './ui/Container.astro';
import Button from './ui/Button.astro';
import Badge from './ui/Badge.astro';
import { COPY } from '../lib/abFlags';

export interface Props {
  variant?: 'A' | 'B';
}

const { variant = 'A' } = Astro.props;

// Default text for server-side rendering
const defaultH1Text = COPY.heroH1.A;
const defaultCtaText = COPY.heroCTA.A;
---

<section class="relative bg-gradient-to-br from-base-100 to-base-200 overflow-hidden">
  <!-- Background overlay -->
  <div class="absolute inset-0 bg-primary/5"></div>

  <!-- Hero content -->
  <Container class="relative z-10">
    <div class="flex flex-col lg:flex-row items-center justify-between min-h-[80vh] py-12 lg:py-20">

      <!-- Left content -->
      <div class="flex-1 lg:pr-12 text-center lg:text-left max-w-2xl mx-auto lg:mx-0">
        <h1 id="hero-h1" class="text-4xl md:text-5xl lg:text-6xl font-bold text-base-content leading-tight mb-6 text-balance">
          {defaultH1Text}
        </h1>

        <p class="text-lg md:text-xl text-base-content/80 mb-8 leading-relaxed text-balance">
          Descubra o que está sabotando seu sono com um teste rápido de 1 minuto.
        </p>

        <!-- CTA Button -->
        <div class="mb-8">
          <Button
            href="/quiz"
            variant="primary"
            size="lg"
            class="w-full sm:w-auto mb-4 sm:mb-0 sm:mr-4 animate-bounce-subtle"
            data-event="durma_cta_click"
            data-position="hero"
            id="hero-cta"
          >
            {defaultCtaText}
          </Button>
        </div>

        <!-- Trust indicators -->
        <div class="flex flex-wrap justify-center lg:justify-start gap-4 items-center">
          <Badge variant="primary" class="whitespace-nowrap">100% natural</Badge>
          <Badge variant="accent" class="whitespace-nowrap">Sem melatonina</Badge>
          <Badge variant="neutral" class="whitespace-nowrap">Checklist prático</Badge>
        </div>
      </div>

      <!-- Right content - Hero image -->
      <div class="flex-1 mt-12 lg:mt-0 max-w-lg mx-auto lg:max-w-none">
        <div class="relative">
          <!-- Placeholder for hero image -->
          <div class="relative aspect-[4/3] bg-gradient-to-br from-primary-100 to-accent-100 rounded-2xl shadow-2xl overflow-hidden">
            <div class="absolute inset-0 flex items-center justify-center">
              <div class="text-center">
                <div class="w-24 h-24 mx-auto mb-4 bg-primary-200 rounded-full flex items-center justify-center">
                  <svg class="w-12 h-12 text-primary-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21.752 15.002A9.718 9.718 0 0118 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 003 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 009.002-5.998z"></path>
                  </svg>
                </div>
                <p class="text-primary-700 font-medium">Pessoa dormindo tranquilamente</p>
              </div>
            </div>
          </div>

          <!-- Floating elements -->
          <div class="absolute -top-4 -right-4 w-8 h-8 bg-accent rounded-full animate-bounce-subtle" style="animation-delay: 0.5s;"></div>
          <div class="absolute -bottom-4 -left-4 w-6 h-6 bg-secondary rounded-full animate-bounce-subtle" style="animation-delay: 1s;"></div>
        </div>
      </div>
    </div>
  </Container>
</section>

<script>
  import { trackSectionView } from '../lib/analytics';
  import { getUserVariant, COPY } from '../lib/abFlags';

  // Update A/B test content on client-side
  document.addEventListener('DOMContentLoaded', () => {
    const variant = getUserVariant();

    // Update H1 text
    const h1Element = document.getElementById('hero-h1');
    if (h1Element) {
      h1Element.textContent = COPY.heroH1[variant];
    }

    // Update CTA text
    const ctaElement = document.getElementById('hero-cta');
    if (ctaElement) {
      ctaElement.textContent = COPY.heroCTA[variant];
    }
  });

  // Track hero section view
  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        trackSectionView('hero');
        observer.unobserve(entry.target);
      }
    });
  }, { threshold: 0.5 });

  const heroSection = document.querySelector('section');
  if (heroSection) {
    observer.observe(heroSection);
  }
</script>